/**
 * @description 
 *	define space name 'CustomerBasicInformation' (field name 'custId' type 'string' field name 'version' type 'string' field name 'timeStamp' type 'DateTime' field name 'custData' type 'string' ) key (fields('custId')) replication_count 3 persistence_policy 'async' persistence_type 'share_nothing'
 */
Concepts.ECF.SCENARIO.CustomerBasicInfo rulefunction RuleFunctions.ECF.AS.getCustomerBasicInformation {
	attribute {
		validity = ACTION;
	}
	scope {
		String extId;
		String userId;
		String seqId; //for concurrent-rtc
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.IMDG_TAG + ":getCustomerBasicInformation");
		
		String custId = userId;
		try{
			Object tuple = Metaspace.Tuple.create();

			Metaspace.Tuple.putString(tuple, "custId", custId);
			Object object = Metaspace.Space.get(System.getGlobalVariableAsString("AS/SPACE_CUSTOMER_BASIC_INFORMATION", "LGUPLUS_METASPACE.CustomerBasicInformation"), tuple);
			if(object == null) return null;
			
			String data = Metaspace.Tuple.getString(object, "custData");
			Log.log(logger, ScoreCard.log_control.IMDG_LEVEL, "CustomerBasicInfo(%s)", data);
			if(data == null || data == "") return null;
			return convertStringToCBI(extId, data, seqId); 

		}catch(Exception e){
			Log.log(logger, ScoreCard.log_control.ERROR_LEVEL, "error:" + e);
		}	
		return null;
	}
}