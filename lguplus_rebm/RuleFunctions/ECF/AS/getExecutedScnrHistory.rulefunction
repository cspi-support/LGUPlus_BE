/**
 * @description 
 */
Object[] rulefunction RuleFunctions.ECF.AS.getExecutedScnrHistory {
	attribute {
		validity = ACTION;
	}
	scope {
		String userId;
		DateTime startTime;
		DateTime endTime;
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.IMDG_TAG + ":getExecutedScnrHistory");
		
		try{
			if(userId == null || userId == "") return null;
			String filters = "executedScnrId LIKE \"" + userId + ".*\"";
			if(startTime != null) {
				filters = filters + " AND " + " timeStamp >= " + DateTime.getTimeInMillis(startTime);
			}
			if(endTime != null) {
				filters = filters + " AND " + " timeStamp <= " + DateTime.getTimeInMillis(endTime);
			}

			/* when 절에서는 사용될 수 없고 then 절에서만 사용가능한 방법
			Object resultIterator = AS.queryIterator("/Channels/legacyASChannel/DetectedEventHistory", null, "get", "snapshot", "all", 0, 1000, filter);
			int count = Collections.size(resultIterator);
			Concepts.ECF.SCENARIO.DetectedScenario[] detectedHistory = Concepts.ECF.SCENARIO.DetectedScenario[count]{};
			int i = 0;
			while(Collections.Iterator.hasNext(resultIterator)){
				Object tuple = Collections.Iterator.next(resultIterator);
				if(tuple != null){
					String data = Metaspace.Tuple.getString(tuple, "detectedEventHistory");
					detectedHistory[i] = convertStringToDS(data);
					i = i+1;
				}
			}
			*/

			Object[] result = AS.query("/Channels/legacyASChannel/ExecutedScnrHistory", null, "get", "snapshot", "all", 0, 1000, filters);
			return result;

			/*
			Concepts.ECF.SCENARIO.ExecutedScenario[] executedScnrHistory = Concepts.ECF.SCENARIO.ExecutedScenario[result@length]{};
			for(int i = 0; i < result@length; i++) {
				Object[] tuple = result[i];
				String executedScnr = getValueAsString("executedScnrHistory", tuple);
				executedScnrHistory[i] = convertStringToES(executedScnr);
			}
			Log.log(logger, ScoreCard.log_control.IMDG_TAG, "filter:%s, executedScnrHistory Count:%d", filter, result@length);
			return executedScnrHistory;
			*/


		}catch(Exception e){
			Log.log(logger, "Error", "error:" + e);
		}	
		return null;
	}
}