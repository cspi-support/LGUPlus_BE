/**
 * @description 
 * define space name 'UserActionHistory' (field name 'uahId' type 'string' field name 'timeStamp' type 'DateTime' field name 'actionId' type 'string' field name 'userActionHistory' type 'string' ) key (fields('uahId')) replication_count 3 persistence_policy 'async' persistence_type 'share_nothing'
 */
void rulefunction RuleFunctions.ECF.AS.putUserActionHistory {
	attribute {
		validity = ACTION;
	}
	scope {
		Concepts.ECF.SCENARIO.UserActionHistory userActionHistory;
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.IMDG_TAG + ":putUserActionHistory");
		
		/* don't use regular expression because of performance issue */
		long uahId = userActionHistory.SID;
		try{
			Object tuple = Metaspace.Tuple.create();

			Metaspace.Tuple.putLong(tuple, "uahId", uahId);
			Metaspace.Tuple.putString(tuple, "seqId", userActionHistory.SEQ_ID);
			Metaspace.Tuple.putString(tuple, "actionId", userActionHistory.ACTION_ID);
			Metaspace.Tuple.putString(tuple, "userActionHistory", convertUAHToString(userActionHistory));
			if(userActionHistory.ACTIVITY_TIME != null){
				Metaspace.Tuple.putLong(tuple, "timeStamp", DateTime.getTimeInMillis(userActionHistory.ACTIVITY_TIME));
			}else{
				Metaspace.Tuple.putLong(tuple, "timeStamp", DateTime.getTimeInMillis(DateTime.now()));
			}

			Object putOption = Metaspace.Space.Options.createPutOptions();
			Metaspace.Space.put(System.getGlobalVariableAsString("AS/SPACE_USER_ACTION_HISTORY", "LGUPLUS_METASPACE.UserActionHistory"), tuple, putOption);
		}catch(Exception e){
			Log.log(logger, "Error", "error:" + e);
		}	
	}
}