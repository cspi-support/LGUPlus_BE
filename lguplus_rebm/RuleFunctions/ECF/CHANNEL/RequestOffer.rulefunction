/**
 * @description 
 */
void rulefunction RuleFunctions.ECF.CHANNEL.RequestOffer {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.Internal.DetectEvent detectEvent;
		Concepts.ECF.SCENARIO.UserActivityTrace userActivityTrace;	
		Concepts.ECF.SCENARIO.CustomerBasicInfo customerBasicInfo;
		Concepts.ECF.SCENARIO.ContentInfo contentInfo;
		String scenarioId;	
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.RULE_TAG + "RequestOffer");
		String currentTime = DateTime.format(DateTime.now(), "yyyyMMddHHmmssSSS");
		String offerId = currentTime + Random(100);
		String ctn = "";
		if(customerBasicInfo.CTN != null && customerBasicInfo.CTN != "") {
			ctn = customerBasicInfo.CTN;
		}
		String reqTime = "";
		if(detectEvent.ReqTime != null){
			reqTime = DateTime.format(detectEvent.ReqTime, "yyyyMMddHHmmssSSS");
		}
		String[] param = {scenarioId, "" + customerBasicInfo.CID, customerBasicInfo.CTN, detectEvent.SeqId, detectEvent.SvcName, reqTime, currentTime};

		if(String.compareToIgnoreCase(System.getGlobalVariableAsString("COMMON/REVISION", "V2"), "V2") == 0){
//			Log.log(logger, "info", "request offer: SeqId" + detectEvent.SeqId);
			RuleFunctions.ECF.CHANNEL.AS.RequestOfferToAS(offerId, detectEvent.SID, param);
		}else{
			RuleFunctions.ECF.CHANNEL.LOCAL_CH.RequestOfferToLocal(offerId, detectEvent.SID, param);
		}
	}
}