/**
 * @description 
 */
int rulefunction RuleFunctions.ECF.SCENARIO.GetRefs_Genre_ANY_IN {
	attribute {
		validity = CONDITION;
	}
	scope {
		Events.Internal.DetectEvent detectEvent;
		Concepts.ECF.SCENARIO.UserActivityTrace userActivityTrace;	
		Concepts.ECF.SCENARIO.CustomerBasicInfo customerBasicInfo;
		String GenreSet;		
		int days;
	}
	body {
		boolean useHash = System.getGlobalVariableAsBoolean("AS/USE_HASH_CODE", true);
		if(GenreSet== null || GenreSet == "" || userActivityTrace.GENRE_ID == null || userActivityTrace.GENRE_COUNT == null) return 0;

		DateTime startTime = null;
		DateTime endTime = null;
		if(days > 0){ // 5 ->  now ~ (now-4)
			String nowString= DateTime.format(DateTime.now(), "yyyyMMdd");
			endTime = DateTime.parseString(nowString, "yyyyMMdd");
			startTime = DateTime.addDay(endTime, -(days-1));
		}
		
		String[] genres = String.split(GenreSet, ",");
		int totalCount = 0;
		for(int i=0; i<genres@length; i++){
			for(int j=0; j< userActivityTrace.GENRE_ID@length; j++){
				if(userActivityTrace.GENRE_ID[j] == genres[i]){
					String[] parsed = getParsedDateRefs(userActivityTrace.GENRE_COUNT[j], startTime, endTime);
					if(parsed != null){
						for(int k=0; k<parsed@length; k++){
							if(parsed[k] != null){
								totalCount += Number.intValue(String.substring(parsed[k], 6, 7), 10); //yyMMddC
							}
						}
					}
				}
			}
		}
		return totalCount;
	}
}