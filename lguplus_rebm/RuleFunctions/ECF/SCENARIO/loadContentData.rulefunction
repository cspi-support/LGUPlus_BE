/**
 * @description 컨텐츠 관련한 데이터를 로드한다.
 * 컨텐츠 정보는 WorkingMemory 에 유지하고 AVAIL_ET 값에 따라서 재로드를 할지를 결정한다.  
 */

Concepts.ECF.SCENARIO.ContentInfo rulefunction RuleFunctions.ECF.SCENARIO.loadContentData {
	attribute {
		validity = ACTION;
	}
	scope {
		String albumId;
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.RULE_TAG + ":loadContentData");
		RuleFunctions.ECF.SYSTEM.updatePerformanceCheck("content");
		
		/*
		*	1. extId 로 사용자의 sid 를 사용한다. 중복될 수 있는 가능성을 체크해야한다.
		*/
		String album_extId = albumId;
		
		try{
			/*
			* In-Memory 상의 User 정보를 가져온다. 
			* preprocessor 에서는 Concept 의 업데이트가 불가능하고 생성만 가능하다.
			* 확인 필요한 사항 : 이미 생성되어 있는 Concept 의 변경이 필요한 경우는 어떤식으로 진행해야 할지.
			*/
			Concepts.ECF.SCENARIO.ContentInfo ciInstance = Instance.getByExtId(album_extId);

			/* 2. workingMemory 아이템이 유효하다면 이를 사용한다. */
			if(ciInstance != null && (ciInstance.AVAIL_ET == null || DateTime.before(DateTime.now(), ciInstance.AVAIL_ET))){
				Log.log(logger, ScoreCard.log_control.PREPROCESS_LEVEL, "album: %s from WorkingMemory", album_extId);
				return ciInstance;
			}

			/* 3. get ContentData from ActiveSpace */
			String data = RuleFunctions.ECF.AS.getContentInformation(album_extId);
			if(data != null){
				return convertStringToCI(album_extId, data);
			}
			
			/* 4. get ContentData from Mart */
			if(System.getGlobalVariableAsString("COMMON/MART_MODE", "real") == "real"){
				Concepts.LGUPLUS.CONTENT_INFO item = RuleFunctions.ECF.MART.getContentInfoFromMart(albumId);
				if(item == null) return null;
				ciInstance = Concepts.ECF.SCENARIO.ContentInfo.ContentInfo(
					album_extId/*extId String */,
					item.CID/*CID String */,
					item.TITLE/*TITLE String */,
					item.CREATED/*CREATED DateTime */,
					item.GENRE/*GENRE String */,
					item.CATEGORY/*CATEGORY String */,
					item.CODE/*CODE String */,
					Math.round(item.PRICE)/*PRICE int */,
					item.SERIES_MODE/*SERIES_MODE String */,
					Math.round(item.EPISODE_NUM)/*EPISODE_NUM int */,
					item.SVC_NAME/*SVC_NAME String */,
					null/*AVAIL_ET DateTime */);
			}else{
				Concepts.LGUPLUS.CONTENT_INFO item = RuleFunctions.ECF.MART.getContentInfoFromMart("M16102600003");
				if(item == null) return null;
				ciInstance = Concepts.ECF.SCENARIO.ContentInfo.ContentInfo(
					album_extId/*extId String */,
					albumId/*CID String */,
					item.TITLE/*TITLE String */,
					item.CREATED/*CREATED DateTime */,
					item.GENRE/*GENRE String */,
					item.CATEGORY/*CATEGORY String */,
					item.CODE/*CODE String */,
					Math.round(item.PRICE)/*PRICE int */,
					item.SERIES_MODE/*SERIES_MODE String */,
					Math.round(item.EPISODE_NUM)/*EPISODE_NUM int */,
					item.SVC_NAME/*SVC_NAME String */,
					null/*AVAIL_ET DateTime */);
			}


			RuleFunctions.ECF.AS.putContentInformation(ciInstance);
			Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "loadContentData:%s", ciInstance.CID);
			return ciInstance;
		}catch(Exception e){
			Log.log(logger, ScoreCard.log_control.ERROR_LEVEL, "Exception:" + e);
			return null;
		}
	}
}