/**
 * @description 
 * User 데이터는 메모리로 로드한다. AVAIL_ET 값에 따라서 재로드할지를 결정한다.
 */
Concepts.ECF.SCENARIO.CustomerBasicInfo rulefunction RuleFunctions.ECF.SCENARIO.loadUserData {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.Internal.ActionEvent actionEvent;
	}
	body {
		Object logger = Log.getLogger(ScoreCard.log_control.RULE_TAG+ ":loadUserData");
		
		/*
		*	1. extId 로 사용자의 sid 를 사용한다. 중복될 수 있는 가능성을 체크해야한다.
		*/
		String cust_extId = actionEvent.SID + ":" + actionEvent.SeqId + ":CBI"; // for concurrent-rtc
		
		/*
		* In-Memory 상의 User 정보를 가져온다. 
		* preprocessor 에서는 Concept 의 업데이트가 불가능하고 생성만 가능하다.
		* 확인 필요한 사항 : 이미 생성되어 있는 Concept 의 변경이 필요한 경우는 어떤식으로 진행해야 할지.
		*/
		Concepts.ECF.SCENARIO.CustomerBasicInfo cbiInstance = Instance.getByExtId(cust_extId);

		/* 2. workingMemory 아이템이 유효하다면 이를 사용한다. */
		if(cbiInstance != null && (cbiInstance.AVAIL_ET == null || DateTime.before(actionEvent.ReqTime, cbiInstance.AVAIL_ET))){
			Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "User: %s from WorkingMemory", cust_extId);
			return cbiInstance;
		}

		/* 3. get UserData from ActiveSpace */
		cbiInstance = RuleFunctions.ECF.AS.getCustomerBasicInformation(cust_extId, actionEvent.SID, actionEvent.SeqId);
		if(cbiInstance != null && (cbiInstance.AVAIL_ET == null || DateTime.before(actionEvent.ReqTime, cbiInstance.AVAIL_ET))){
			Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "User: %s from ActiveSpace", cust_extId);
			return cbiInstance;
		}

		/* 4. get data from DataMart */
		Concepts.LGUPLUS.CUSTOMER_BASIC_INFO item = RuleFunctions.ECF.MART.getCustomerBasicInfoFromMart(actionEvent.SID); 
		if(item != null){
			Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "loaded User(%s) from Mart", item.SID);
			cbiInstance = Concepts.ECF.SCENARIO.CustomerBasicInfo.CustomerBasicInfo(
						cust_extId/*extId String */,
						item.SID/*SID String */,
						item.CID/*CID String */,
						item.SUBSCRIBE_INFO/*SUBSCRIBE_INFO String */,
						getDeserializedToBoolean(item.UNSUB_CANDI)/*UNSUB_CANDI boolean */,
						item.NAME/*NAME String */,
						item.AVAIL_ET/*AVAIL_ET DateTime */
						, actionEvent.SeqId); //for concurrent-rtc
		}
		if(cbiInstance == null){
			Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "unknown User: %s from Mart", actionEvent.SID);

			if(System.getGlobalVariableAsString("COMMON/MART_MODE", "real") == "real"){
				return null;
			}else{
				cbiInstance = createUserInfo(cust_extId, actionEvent);
			}
		}
		/* 5. save to AS */
		RuleFunctions.ECF.AS.putCustomerBasicInformation(cbiInstance);
//		Log.log(logger, ScoreCard.log_control.RULE_LEVEL, "User: %s from Mart", cust_extId);
		return cbiInstance;
	}
}