/**
 * @description 
 */
Events.SYSTEM.sessionLock rulefunction RuleFunctions.ECF.SYSTEM.acquireGlobalSessionLock {
	attribute {
		validity = ACTION;
	}
	scope {
		long lockWith;
		int retryCount;
		int maxWaitTime;
	}
	body {
		Object logger = Log.getLogger("acquireGlobalSessionLock");
		int waitCount = 0;
		String extId = String.format("%d:%d", lockWith, System.currentTimeMillis());
				
		Events.SYSTEM.sessionLock lockEvent =Events.SYSTEM.sessionLock.sessionLock( extId /*extId String */, null /*payload String */, lockWith/*sessionKey String */) ;
		
		while(waitCount < retryCount) {		
			try{
				Object tuple = AS.lockEvent("/Channels/legacyASChannel/GlobalSessionLock", lockEvent, maxWaitTime);
				if(tuple == null){
				} else {
				}
				Log.log(logger,"DEBUG","** total waiting lock count [%d]", waitCount);
				break;
			} catch(Exception e) {
				Log.log(logger,"info","retried [%d][%d][%s]", lockWith, waitCount, e);
				waitCount++;
			}
		}
		
		if(waitCount >= retryCount) {
			Event.consumeEvent(lockEvent);
			Log.log(logger,"info","** lockEvent consumed [waitCount=%d][retryCount=%d][Customer ID: %d]", waitCount, retryCount, lockWith);
			return null;
		} else {
			Event.assertEvent(lockEvent);
			Log.log(logger,"debug","** lock(%s) is acquired", lockEvent.sessionKey);
			return lockEvent;
		}
	}
}